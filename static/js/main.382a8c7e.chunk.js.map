{"version":3,"sources":["Theme/index.ts","components/Calendar/Header.tsx","components/Calendar/WeekView/DateHeader.tsx","components/Calendar/WeekView/EventCard.tsx","components/Calendar/WeekView/index.tsx","components/Calendar/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Theme","colors","grey","darkGrey","blue","black","white","Container","styled","div","theme","Title","Header","title","setNextWeek","setPreviousWeek","IconButton","aria-label","onClick","DateBox","selected","DateHeader","startOfWeek","map","day","index","key","moment","weekday","isSame","add","date","colorPalette","EventCard","startTime","endTime","top","description","height","randomColorIndex","useMemo","Math","floor","random","length","style","background","format","Body","TimeColumn","TimeCell","RowBarColumn","RowBar","SheetBody","DayColumn","amTimes","Array","from","_","i","time","pmTimes","times","rowBars","columnBars","getOffset","startTimeMoment","totalMinutes","hours","minutes","Number","toFixed","WeekView","thisWeekEvents","eventsData","filter","clone","endOf","row","column","startOffset","endOffset","Calendar","useState","startOf","setStartOfWeek","clickedButton","setClickedButton","endOfWeek","get","getWeekTitle","prev","subtract","TransitionGroup","transitionEnterTimeout","transitionLeaveTimeout","CSSTransition","timeout","Date","toISOString","classNames","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.382a8c7e.chunk.js","sourcesContent":["export const Theme = {\n  colors: {\n    grey: '#dadce0',\n    darkGrey: '#70757a',\n    blue: '#1a73e8',\n    black: '#000',\n    white: '#fff',\n  },\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport IconButton from '@material-ui/core/IconButton';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  border-bottom: ${({ theme }) => theme.colors.grey} 1px solid;\n  padding: 10px 0;\n`;\n\nconst Title = styled.div`\n  font-size: 20px;\n  margin-left: 20px;\n`;\n\ninterface HeaderProps {\n  title: string;\n  setNextWeek: () => void;\n  setPreviousWeek: () => void;\n}\n\nconst Header: React.FC<HeaderProps> = ({ title, setNextWeek, setPreviousWeek }) => {\n  return (\n    <Container>\n      <IconButton aria-label=\"Previous week\" onClick={setPreviousWeek}>\n        <NavigateBeforeIcon />\n      </IconButton>\n      <IconButton aria-label=\"Next week\" onClick={setNextWeek}>\n        <NavigateNextIcon />\n      </IconButton>\n      <Title>{title}</Title>\n    </Container>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n`;\n\ninterface DateBoxProps {\n  selected: boolean;\n}\n\nconst DateBox = styled.div<DateBoxProps>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  flex-grow: 1;\n  font-size: 24px;\n  height: 80px;\n  > span {\n    font-size: 12px;\n    color: ${({ theme, selected }) => (selected ? theme.colors.blue : theme.colors.black)};\n    margin-bottom: 10px;\n  }\n  > div {\n    color: ${({ theme, selected }) => (selected ? theme.colors.white : theme.colors.black)};\n    background: ${({ theme, selected }) => (selected ? theme.colors.blue : theme.colors.white)};\n    border-radius: 50%;\n    box-sizing: border-box;\n    padding: 5px;\n  }\n`;\n\nconst DateHeader: React.FC<{ startOfWeek: moment.Moment }> = ({ startOfWeek }) => {\n  return (\n    <Container>\n      {['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'].map((day, index) => (\n        <DateBox key={day} selected={moment().weekday() === index && moment().isSame(startOfWeek, 'week')}>\n          <span>{day}</span>\n          <div>{moment(startOfWeek).add(index, 'days').date()}</div>\n        </DateBox>\n      ))}\n    </Container>\n  );\n};\n\nexport default DateHeader;\n","// @ts-nocheck\nimport React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nconst Container = styled.div`\n  width: calc(100% - 10px);\n  background: ${({ theme }) => theme.colors.darkGrey};\n  color: white;\n  position: absolute;\n  border-radius: 2px;\n  font-size: 12px;\n  min-height: 25px;\n  padding-top: 5px;\n  box-sizing: border-box;\n  cursor: pointer;\n`;\n\nconst Title = styled.div`\n  font-weight: bold;\n`;\n\nconst colorPalette = ['#ef5350', '#ea80fc', '#673ab7', '#3f51b5', '#2196f3', '#7c4dff', '#00bcd4', '#009688', '#ffc107'];\n\ninterface EventCardProps {\n  title: string;\n  startTime?: string;\n  endTime?: string;\n  description: string;\n  top: string;\n  height: string;\n}\n\nconst EventCard: React.FC<EventCardProps> = ({ title, startTime, endTime, description, top, height }) => {\n  const randomColorIndex = useMemo(() => Math.floor(Math.random() * colorPalette.length), []);\n  return (\n    <Container style={{ top, height, background: colorPalette[randomColorIndex] }}>\n      <Title>{title}</Title>\n      {startTime && endTime && `${moment(startTime).format('hh:mm A')} - ${moment(endTime).format('hh:mm A')}`}\n    </Container>\n  );\n};\n\nexport default EventCard;\n","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport DateHeader from './DateHeader';\nimport EventCard from './EventCard';\n\nconst Container = styled.div`\n  display: flex;\n  position: relative;\n`;\n\nconst Body = styled.div`\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TimeColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 80px;\n  font-size: 10px;\n  color: ${({ theme }) => theme.colors.darkGrey};\n`;\n\nconst TimeCell = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n`;\n\nconst RowBarColumn = styled.div`\n  display: flex;\n  width: 10px;\n  flex-direction: column;\n  margin-top: 80px;\n  border-right: 1px solid ${({ theme }) => theme.colors.grey};\n`;\n\nconst RowBar = styled.div`\n  width: calc(100% - 90px);\n  height: 38px;\n  border-bottom: 1px solid ${({ theme }) => theme.colors.grey};\n  position: absolute;\n`;\n\nconst SheetBody = styled.div`\n  flex-grow: 1;\n  display: flex;\n`;\n\nconst DayColumn = styled.div`\n  flex-grow: 1;\n  height: 100%;\n  position: relative;\n  border-right: 1px solid ${({ theme }) => theme.colors.grey};\n`;\n\nconst amTimes = Array.from(Array(11), (_, i) => i + 1).map((time) => `${time} AM`);\nconst pmTimes = Array.from(Array(11), (_, i) => i + 1).map((time) => `${time} PM`);\nconst times = [...amTimes, '12 PM', ...pmTimes, ''];\n\nconst rowBars = Array.from(Array(24), (_, i) => i);\n\nconst columnBars = Array.from(Array(7), (_, i) => i);\n\ninterface WeekViewProps {\n  startOfWeek: moment.Moment;\n  eventsData: (\n    | {\n        title: string;\n        startTime: string;\n        endTime: string;\n        description: string;\n        isAllDay: boolean;\n      }\n    | {\n        title: string;\n        description: string;\n        isAllDay: boolean;\n        startTime?: undefined;\n        endTime?: undefined;\n      }\n  )[];\n}\n\nconst getOffset = (startTime?: string) => {\n  if (!startTime) return 0;\n  const startTimeMoment = moment(startTime);\n  const totalMinutes = (startTimeMoment.hours() + 1) * 60 + startTimeMoment.minutes();\n  return Number(((totalMinutes * 100) / (25 * 60)).toFixed(2));\n};\n\nconst WeekView: React.FC<WeekViewProps> = ({ startOfWeek, eventsData }) => {\n  const thisWeekEvents = eventsData.filter(({ startTime }) => {\n    const startTimeMoment = moment(startTime);\n    return startTimeMoment >= startOfWeek && startTimeMoment <= startOfWeek.clone().add(7, 'days').endOf('day');\n  });\n  return (\n    <Container>\n      <TimeColumn>\n        <div style={{ height: '110px' }} />\n        {times.map((time) => (\n          <TimeCell key={time}>{time}</TimeCell>\n        ))}\n      </TimeColumn>\n      <RowBarColumn>\n        <RowBar style={{ top: `${65}px` }} />\n        {rowBars.map((row) => (\n          <RowBar key={row} style={{ top: `${row * 40 + 105}px` }} />\n        ))}\n      </RowBarColumn>\n      <Body>\n        <DateHeader startOfWeek={startOfWeek} />\n        <SheetBody>\n          {columnBars.map((column) => (\n            <DayColumn key={column}>\n              {thisWeekEvents\n                .filter(({ startTime }) => moment(startTime).weekday() === column)\n                .map(({ title, startTime, endTime, description }) => {\n                  const startOffset = getOffset(startTime);\n                  const endOffset = getOffset(endTime);\n                  const height = `${endOffset - startOffset}%`;\n                  return (\n                    <EventCard\n                      key={`${title} ${description} ${startTime}`}\n                      title={title}\n                      startTime={startTime}\n                      endTime={endTime}\n                      description={description}\n                      top={`calc(${startOffset}% - ${startOffset === 0 ? 0 : 10}px)`}\n                      height={height}\n                    />\n                  );\n                })}\n            </DayColumn>\n          ))}\n        </SheetBody>\n      </Body>\n    </Container>\n  );\n};\n\nexport default WeekView;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport Header from './Header';\nimport WeekView from './WeekView';\nimport eventsData from '../../StubData/events.json';\nimport './style.css';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Calendar: React.FC = () => {\n  const [startOfWeek, setStartOfWeek] = useState(moment().startOf('week'));\n  const [clickedButton, setClickedButton] = useState('');\n\n  const setNextWeek = () => {\n    setClickedButton('next');\n    setStartOfWeek((prev) => prev.clone().add(7, 'days'));\n  };\n\n  const setPreviousWeek = () => {\n    setClickedButton('previous');\n    setStartOfWeek((prev) => prev.clone().subtract(7, 'days'));\n  };\n\n  const getWeekTitle = () => {\n    const endOfWeek = startOfWeek.clone().add(7, 'days');\n    if (startOfWeek.get('month') === endOfWeek.get('month')) {\n      return startOfWeek.format('MMM YYYY');\n    }\n    return `${startOfWeek.format('MMM')} - ${endOfWeek.format('MMM YYYY')}`;\n  };\n\n  return (\n    <Container>\n      <Header title={getWeekTitle()} setNextWeek={setNextWeek} setPreviousWeek={setPreviousWeek} />\n      <TransitionGroup transitionEnterTimeout={100} transitionLeaveTimeout={100}>\n        <CSSTransition timeout={100} key={new Date().toISOString()} classNames={clickedButton}>\n          <WeekView startOfWeek={startOfWeek} eventsData={eventsData} />\n        </CSSTransition>\n      </TransitionGroup>\n    </Container>\n  );\n};\n\nexport default Calendar;\n","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { Theme } from './Theme';\nimport Calendar from './components/Calendar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={Theme}>\n      <div className=\"App\">\n        <Calendar />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}